// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(AplicationDbContext))]
    partial class AplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DataAccessLayer.Models.Notebook.EmailEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("PersonId1")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId1");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Notebook.PersonEntity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Notebook.PhoneEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("PersonId1")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId1");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Notebook.PhotoEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Image1")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("PersonId1")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId1");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Notebook.SkypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("PersonId1")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("SkypeLogin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId1");

                    b.ToTable("Skype");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Notebook.EmailEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Notebook.PersonEntity", "Person")
                        .WithMany("Emails")
                        .HasForeignKey("PersonId1");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Notebook.PhoneEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Notebook.PersonEntity", "Person")
                        .WithMany("Phones")
                        .HasForeignKey("PersonId1");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Notebook.PhotoEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Notebook.PersonEntity", "Person")
                        .WithMany("Photos")
                        .HasForeignKey("PersonId1");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Notebook.SkypeEntity", b =>
                {
                    b.HasOne("DataAccessLayer.Models.Notebook.PersonEntity", "Person")
                        .WithMany("SkypeContacts")
                        .HasForeignKey("PersonId1");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataAccessLayer.Models.Notebook.PersonEntity", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Phones");

                    b.Navigation("Photos");

                    b.Navigation("SkypeContacts");
                });
#pragma warning restore 612, 618
        }
    }
}
